[진경수]

1.PreparedStatement 와 Statement의 차이점은 무었인가?(어느경우에 사용하는가?)
	Statement는 메소드중에 쿼리문의 인자를 전달할 수있는 메소드가 없다
	PreparedStatement객체는 Connnection객체의 prepareStatement메소드를 통해서 sql문을 전달할 수 있다.
	★PreparedStatement 와 Statement의 가장 큰 차이점은 캐시(cache) 사용여부이다.
	Statement를 사용하면 매번 쿼리를 수행할 때마다 1) ~ 3) 단계를 거치게 되고, 
	PreparedStatement는 처음 한 번만 세 단계를 거친 후 캐시에 담아 재사용을 한다는 것이다. 
	만약 동일한 쿼리를 반복적으로 수행한다면 PreparedStatment가 DB에 훨씬 적은 부하를 주며, 성능도 좋다.

	ex1) 특정 행 검색 명령 sql일 경우
		<Statement>		
		String sql = "SELECT colum1, colum2 FROM tablename WHERE colum1 = '" + value + "'";
		try{
			Connection connection = getConnection();
			Statement statement = connection.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
		}catch(SQLException ㄷ){
			e.printStackTrace();
		}
		
		<PreparedStatement>
		String sql = "SELECT colum1, colum2 FROM tablename WHERE colum1 = ?";
		try{
			Connection connection = getConnection();
			PreparedStatement statement = connection.preparedStatement();
			statement.setString(1,value);
			ResultSet resultSet = stmt.executeQuery(sql);
		}catch(SQLException ㄷ){
			e.printStackTrace();
		}
	
	ex2) 쿼리 반복수행 작업일 경우
		<Statement>	
		for (int i = 0; i < 10000; i++) {
			statement.executeUpdate("INSERT INTO TEST_TABLE VALUES('"+content+"');
		}
	
	
	
		<PreparedStatement>
		statement = conn.preapreStatement("INSERT INTO TEST_TABLE VALUES(?)");
		for (int i = 0; i < 10000; i++) {
			statement.setString(1, content+i);
			statement.executeUpdate();
		}

2.while문과 for문의 차이점
	while 문
	루프를 계속할 조건만 있고 초기식이나 증감식이 없다. 
	아예 제어 변수라는 개념이 없으며 루프 내부에서 조건식의 진위 여부를 변경해야 한다. 
	그래서 while문은 반복 횟수가 가변적이다. 사용자의 입력이나 네트워크의 변화, 
	특정 신호의 입력 등 언제 발생할지 모르는 조건에 대해 반복할 때는 while문을 쓰는 것이 적합하다.
	즉, while 문은 지정된 식이 false가 될 때까지 하나의 문이나 문 블록을 반복하여 실행합니다. 
	각 루프를 실행하기 전에 expression을 테스트하기 때문에 while 문은 0번 이상 실행됩니다. 
	while 루프는 Exit 문을 지원하지 않는다는 점을 제외하고는 do while ... 루프와 비슷합니다.
	
	for 문
	가장 큰 특징은 제어 변수를 사용한다는 점이다. 
	루프를 통제하는 변수를 선언하고 이 변수가 일정한 범위의 값을 가지는 동안 명령을 계속 반복한다. 
	그래서 통상 for문은 반복 횟수가 이미 정해져 있고 루프 중간에서 탈출하는 경우가 별로 없다. 
	물론 break문으로 강제로 탈출할 수도 있지만 일반적으로 반복 횟수가 정해져 있다.
	그래서 for문은 1~100까지, 1번 학생~60번 학생까지의 경우처럼 미리 정해진 횟수만큼 반복할 때 가장 편리하다.
	 또한 문장안에 초기식, 조건식, 증감식이 포함되어 있어서 루프의 선두만 봐도 변수의 변화를 쉽게 파악하고 변경할 수 있다.
	즉, for 루프를 사용하면 식 시퀀스를 여러 번 평가할 수 있습니다. 
	이것은 수식을 평가하는 동안 많아야 한 번 각 식을 통과하는 If 및 Select 식과는 다릅니다. 
	for 루프는 식을 평가해야 하는 횟수를 미리 알고 있는 경우 가장 좋은 방법입니다.
